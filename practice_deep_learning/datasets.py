# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_datasets.ipynb.

# %% auto 0
__all__ = ['inplace', 'collacte_dict', 'show_image', 'subplots', 'get_grid', 'show_images', 'get_dls', 'DataLoaders']

# %% ../nbs/05_datasets.ipynb 1
import matplotlib.pyplot as plt
from datasets import load_dataset, load_dataset_builder
import torchvision.transforms.functional as TF
from torch.utils.data import DataLoader, default_collate
import torch
from operator import itemgetter
import fastcore.all as fc
import numpy as np
from itertools import zip_longest

# %% ../nbs/05_datasets.ipynb 14
def inplace(f):
    def _f(b):
        f(b)
        return b
    return _f

# %% ../nbs/05_datasets.ipynb 20
def collacte_dict(ds):
    get = itemgetter(*ds.features)
    def _f(b):
        return get(default_collate(b))
    return _f

# %% ../nbs/05_datasets.ipynb 24
def show_image(im, ax=None, figsize=None, title=None, noframe=True, **kwargs):
    if fc.hasattrs(im, ('permute', 'cpu', 'detach')):
        im = im.detach().cpu()
        if len(im.shape)== 3 and im.shape[0] < 5:
            im = im.permute(1, 2, 0)
    elif not isinstance(im, np.ndarray):
        im = np.array(im)
    if ax is None:
        _, ax = plt.subplots(figsize=figsize)
    ax.imshow(im, **kwargs)
    if title is not None:
        ax.set_title(title)
    ax.set_xticks([]) 
    ax.set_yticks([]) 
    if noframe:
        ax.axis('off')
    return ax

# %% ../nbs/05_datasets.ipynb 26
def subplots(nrows=1, ncols=1, imsize=3, figsize=None, suptitle=None, **kwargs):
    if not figsize:
        figsize = (ncols*imsize, nrows*imsize)
    fig, axs = plt.subplots(nrows, ncols, figsize=figsize, **kwargs)
    if not suptitle:
        fig.suptitle(suptitle)
    if nrows*ncols == 1:
        axs = np.array([axs])
    return fig, axs  

# %% ../nbs/05_datasets.ipynb 28
def get_grid(n, nrows=None, ncols=None, suptitle=None, **kwargs):
    if nrows:
        ncols = ncols or int(np.floor(n/nrows))
    elif ncols:
        nrows = nrows or int(np.ceil(n/ncols))
    else:
        nrows = int(np.sqrt(n))
        ncols = int(np.floor(n/nrows))
    fig, axs = subplots(nrows, ncols, **kwargs)
    if suptitle is not None:
        fig.suptitle(suptitle)
    return fig, axs

# %% ../nbs/05_datasets.ipynb 30
def show_images(imgs, nrows=None, ncols=None, titles=None, **kwargs):
    axs = get_grid(len(imgs), nrows=nrows, ncols=ncols, **kwargs)[1].flat
    for img, ax, title in zip_longest(imgs, axs, titles or []):
        show_image(img, ax, title=title) 

# %% ../nbs/05_datasets.ipynb 32
def get_dls(train_ds, valid_ds, bs, **kwargs):
    return (
        DataLoader(train_ds, bs, shuffle=True, **kwargs),
        DataLoader(valid_ds, bs*2, shuffle=False, **kwargs)
    )

class DataLoaders:
    def __init__(self, *dls):
        self.train, self.valid = dls[:2]
    
    @classmethod
    def from_dd(cls, dd, batch_size, **kwargs):
        collate_fn = collacte_dict(dd['train'])
        return cls(*get_dls(*dd.values(), bs=batch_size, collate_fn=collate_fn, **kwargs))
