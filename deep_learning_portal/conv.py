# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_convolutions.ipynb.

# %% auto 0
__all__ = ['def_device', 'conv', 'to_device', 'collate_device']

# %% ../nbs/07_convolutions.ipynb 1
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms.functional as TF
import matplotlib.pyplot as plt
from functools import partial
from datasets import load_dataset
from torch.utils.data import DataLoader, default_collate
import numpy as np
import pickle, gzip
from pathlib import Path
import matplotlib as mpl
import pandas as pd
from .training import *
from typing import Mapping

# %% ../nbs/07_convolutions.ipynb 35
def conv(ni, nf, stride=2, kernel_size=3, act=True):
    res = nn.Conv2d(ni, nf, stride=stride, kernel_size=kernel_size, padding=kernel_size//2)
    if act:
        res = nn.Sequential(res, nn.ReLU())
    return res

# %% ../nbs/07_convolutions.ipynb 39
def_device = 'cuda' if torch.cuda.is_available() else 'cpu'

def to_device(x, device=def_device):
    if isinstance(x, torch.Tensor):
        return x.to(device)
    elif isinstance(x, Mapping):
        return {k:v.to(device) for k,v in x.items()}
    return type(x)(to_device(o) for o in x)

def collate_device(b):
    return to_device(default_collate(b))
